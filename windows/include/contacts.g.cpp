// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "contacts.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_example {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// Name

Name::Name(
  const std::string& first,
  const std::string& last,
  const std::string& middle,
  const std::string& prefix,
  const std::string& suffix,
  const std::string& nickname,
  const std::string& first_phonetic,
  const std::string& last_phonetic,
  const std::string& middle_phonetic)
 : first_(first),
    last_(last),
    middle_(middle),
    prefix_(prefix),
    suffix_(suffix),
    nickname_(nickname),
    first_phonetic_(first_phonetic),
    last_phonetic_(last_phonetic),
    middle_phonetic_(middle_phonetic) {}

const std::string& Name::first() const {
  return first_;
}

void Name::set_first(std::string_view value_arg) {
  first_ = value_arg;
}


const std::string& Name::last() const {
  return last_;
}

void Name::set_last(std::string_view value_arg) {
  last_ = value_arg;
}


const std::string& Name::middle() const {
  return middle_;
}

void Name::set_middle(std::string_view value_arg) {
  middle_ = value_arg;
}


const std::string& Name::prefix() const {
  return prefix_;
}

void Name::set_prefix(std::string_view value_arg) {
  prefix_ = value_arg;
}


const std::string& Name::suffix() const {
  return suffix_;
}

void Name::set_suffix(std::string_view value_arg) {
  suffix_ = value_arg;
}


const std::string& Name::nickname() const {
  return nickname_;
}

void Name::set_nickname(std::string_view value_arg) {
  nickname_ = value_arg;
}


const std::string& Name::first_phonetic() const {
  return first_phonetic_;
}

void Name::set_first_phonetic(std::string_view value_arg) {
  first_phonetic_ = value_arg;
}


const std::string& Name::last_phonetic() const {
  return last_phonetic_;
}

void Name::set_last_phonetic(std::string_view value_arg) {
  last_phonetic_ = value_arg;
}


const std::string& Name::middle_phonetic() const {
  return middle_phonetic_;
}

void Name::set_middle_phonetic(std::string_view value_arg) {
  middle_phonetic_ = value_arg;
}


EncodableList Name::ToEncodableList() const {
  EncodableList list;
  list.reserve(9);
  list.push_back(EncodableValue(first_));
  list.push_back(EncodableValue(last_));
  list.push_back(EncodableValue(middle_));
  list.push_back(EncodableValue(prefix_));
  list.push_back(EncodableValue(suffix_));
  list.push_back(EncodableValue(nickname_));
  list.push_back(EncodableValue(first_phonetic_));
  list.push_back(EncodableValue(last_phonetic_));
  list.push_back(EncodableValue(middle_phonetic_));
  return list;
}

Name Name::FromEncodableList(const EncodableList& list) {
  Name decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    std::get<std::string>(list[4]),
    std::get<std::string>(list[5]),
    std::get<std::string>(list[6]),
    std::get<std::string>(list[7]),
    std::get<std::string>(list[8]));
  return decoded;
}

// Phone

Phone::Phone(
  const std::string& number,
  const std::string& normalized_number,
  const std::string& label,
  const std::string& custom_label,
  bool is_primary)
 : number_(number),
    normalized_number_(normalized_number),
    label_(label),
    custom_label_(custom_label),
    is_primary_(is_primary) {}

const std::string& Phone::number() const {
  return number_;
}

void Phone::set_number(std::string_view value_arg) {
  number_ = value_arg;
}


const std::string& Phone::normalized_number() const {
  return normalized_number_;
}

void Phone::set_normalized_number(std::string_view value_arg) {
  normalized_number_ = value_arg;
}


const std::string& Phone::label() const {
  return label_;
}

void Phone::set_label(std::string_view value_arg) {
  label_ = value_arg;
}


const std::string& Phone::custom_label() const {
  return custom_label_;
}

void Phone::set_custom_label(std::string_view value_arg) {
  custom_label_ = value_arg;
}


bool Phone::is_primary() const {
  return is_primary_;
}

void Phone::set_is_primary(bool value_arg) {
  is_primary_ = value_arg;
}


EncodableList Phone::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(number_));
  list.push_back(EncodableValue(normalized_number_));
  list.push_back(EncodableValue(label_));
  list.push_back(EncodableValue(custom_label_));
  list.push_back(EncodableValue(is_primary_));
  return list;
}

Phone Phone::FromEncodableList(const EncodableList& list) {
  Phone decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    std::get<bool>(list[4]));
  return decoded;
}

// Email

Email::Email(
  const std::string& address,
  const std::string& label,
  const std::string& custom_label,
  bool is_primary)
 : address_(address),
    label_(label),
    custom_label_(custom_label),
    is_primary_(is_primary) {}

const std::string& Email::address() const {
  return address_;
}

void Email::set_address(std::string_view value_arg) {
  address_ = value_arg;
}


const std::string& Email::label() const {
  return label_;
}

void Email::set_label(std::string_view value_arg) {
  label_ = value_arg;
}


const std::string& Email::custom_label() const {
  return custom_label_;
}

void Email::set_custom_label(std::string_view value_arg) {
  custom_label_ = value_arg;
}


bool Email::is_primary() const {
  return is_primary_;
}

void Email::set_is_primary(bool value_arg) {
  is_primary_ = value_arg;
}


EncodableList Email::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(address_));
  list.push_back(EncodableValue(label_));
  list.push_back(EncodableValue(custom_label_));
  list.push_back(EncodableValue(is_primary_));
  return list;
}

Email Email::FromEncodableList(const EncodableList& list) {
  Email decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<bool>(list[3]));
  return decoded;
}

// Address

Address::Address(
  const std::string& address,
  const std::string& label,
  const std::string& custom_label,
  const std::string& street,
  const std::string& pobox,
  const std::string& neighborhood,
  const std::string& city,
  const std::string& state,
  const std::string& postal_code,
  const std::string& country,
  const std::string& iso_country,
  const std::string& sub_admin_area,
  const std::string& sub_locality)
 : address_(address),
    label_(label),
    custom_label_(custom_label),
    street_(street),
    pobox_(pobox),
    neighborhood_(neighborhood),
    city_(city),
    state_(state),
    postal_code_(postal_code),
    country_(country),
    iso_country_(iso_country),
    sub_admin_area_(sub_admin_area),
    sub_locality_(sub_locality) {}

const std::string& Address::address() const {
  return address_;
}

void Address::set_address(std::string_view value_arg) {
  address_ = value_arg;
}


const std::string& Address::label() const {
  return label_;
}

void Address::set_label(std::string_view value_arg) {
  label_ = value_arg;
}


const std::string& Address::custom_label() const {
  return custom_label_;
}

void Address::set_custom_label(std::string_view value_arg) {
  custom_label_ = value_arg;
}


const std::string& Address::street() const {
  return street_;
}

void Address::set_street(std::string_view value_arg) {
  street_ = value_arg;
}


const std::string& Address::pobox() const {
  return pobox_;
}

void Address::set_pobox(std::string_view value_arg) {
  pobox_ = value_arg;
}


const std::string& Address::neighborhood() const {
  return neighborhood_;
}

void Address::set_neighborhood(std::string_view value_arg) {
  neighborhood_ = value_arg;
}


const std::string& Address::city() const {
  return city_;
}

void Address::set_city(std::string_view value_arg) {
  city_ = value_arg;
}


const std::string& Address::state() const {
  return state_;
}

void Address::set_state(std::string_view value_arg) {
  state_ = value_arg;
}


const std::string& Address::postal_code() const {
  return postal_code_;
}

void Address::set_postal_code(std::string_view value_arg) {
  postal_code_ = value_arg;
}


const std::string& Address::country() const {
  return country_;
}

void Address::set_country(std::string_view value_arg) {
  country_ = value_arg;
}


const std::string& Address::iso_country() const {
  return iso_country_;
}

void Address::set_iso_country(std::string_view value_arg) {
  iso_country_ = value_arg;
}


const std::string& Address::sub_admin_area() const {
  return sub_admin_area_;
}

void Address::set_sub_admin_area(std::string_view value_arg) {
  sub_admin_area_ = value_arg;
}


const std::string& Address::sub_locality() const {
  return sub_locality_;
}

void Address::set_sub_locality(std::string_view value_arg) {
  sub_locality_ = value_arg;
}


EncodableList Address::ToEncodableList() const {
  EncodableList list;
  list.reserve(13);
  list.push_back(EncodableValue(address_));
  list.push_back(EncodableValue(label_));
  list.push_back(EncodableValue(custom_label_));
  list.push_back(EncodableValue(street_));
  list.push_back(EncodableValue(pobox_));
  list.push_back(EncodableValue(neighborhood_));
  list.push_back(EncodableValue(city_));
  list.push_back(EncodableValue(state_));
  list.push_back(EncodableValue(postal_code_));
  list.push_back(EncodableValue(country_));
  list.push_back(EncodableValue(iso_country_));
  list.push_back(EncodableValue(sub_admin_area_));
  list.push_back(EncodableValue(sub_locality_));
  return list;
}

Address Address::FromEncodableList(const EncodableList& list) {
  Address decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    std::get<std::string>(list[4]),
    std::get<std::string>(list[5]),
    std::get<std::string>(list[6]),
    std::get<std::string>(list[7]),
    std::get<std::string>(list[8]),
    std::get<std::string>(list[9]),
    std::get<std::string>(list[10]),
    std::get<std::string>(list[11]),
    std::get<std::string>(list[12]));
  return decoded;
}

// Organization

Organization::Organization(
  const std::string& company,
  const std::string& title,
  const std::string& department,
  const std::string& job_description,
  const std::string& symbol,
  const std::string& phonetic_name,
  const std::string& office_location)
 : company_(company),
    title_(title),
    department_(department),
    job_description_(job_description),
    symbol_(symbol),
    phonetic_name_(phonetic_name),
    office_location_(office_location) {}

const std::string& Organization::company() const {
  return company_;
}

void Organization::set_company(std::string_view value_arg) {
  company_ = value_arg;
}


const std::string& Organization::title() const {
  return title_;
}

void Organization::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string& Organization::department() const {
  return department_;
}

void Organization::set_department(std::string_view value_arg) {
  department_ = value_arg;
}


const std::string& Organization::job_description() const {
  return job_description_;
}

void Organization::set_job_description(std::string_view value_arg) {
  job_description_ = value_arg;
}


const std::string& Organization::symbol() const {
  return symbol_;
}

void Organization::set_symbol(std::string_view value_arg) {
  symbol_ = value_arg;
}


const std::string& Organization::phonetic_name() const {
  return phonetic_name_;
}

void Organization::set_phonetic_name(std::string_view value_arg) {
  phonetic_name_ = value_arg;
}


const std::string& Organization::office_location() const {
  return office_location_;
}

void Organization::set_office_location(std::string_view value_arg) {
  office_location_ = value_arg;
}


EncodableList Organization::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(EncodableValue(company_));
  list.push_back(EncodableValue(title_));
  list.push_back(EncodableValue(department_));
  list.push_back(EncodableValue(job_description_));
  list.push_back(EncodableValue(symbol_));
  list.push_back(EncodableValue(phonetic_name_));
  list.push_back(EncodableValue(office_location_));
  return list;
}

Organization Organization::FromEncodableList(const EncodableList& list) {
  Organization decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    std::get<std::string>(list[4]),
    std::get<std::string>(list[5]),
    std::get<std::string>(list[6]));
  return decoded;
}

// Website

Website::Website(
  const std::string& url,
  const std::string& label,
  const std::string& custom_label)
 : url_(url),
    label_(label),
    custom_label_(custom_label) {}

const std::string& Website::url() const {
  return url_;
}

void Website::set_url(std::string_view value_arg) {
  url_ = value_arg;
}


const std::string& Website::label() const {
  return label_;
}

void Website::set_label(std::string_view value_arg) {
  label_ = value_arg;
}


const std::string& Website::custom_label() const {
  return custom_label_;
}

void Website::set_custom_label(std::string_view value_arg) {
  custom_label_ = value_arg;
}


EncodableList Website::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(url_));
  list.push_back(EncodableValue(label_));
  list.push_back(EncodableValue(custom_label_));
  return list;
}

Website Website::FromEncodableList(const EncodableList& list) {
  Website decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]));
  return decoded;
}

// SocialMedia

SocialMedia::SocialMedia(
  const std::string& user_name,
  const std::string& label,
  const std::string& custom_label)
 : user_name_(user_name),
    label_(label),
    custom_label_(custom_label) {}

const std::string& SocialMedia::user_name() const {
  return user_name_;
}

void SocialMedia::set_user_name(std::string_view value_arg) {
  user_name_ = value_arg;
}


const std::string& SocialMedia::label() const {
  return label_;
}

void SocialMedia::set_label(std::string_view value_arg) {
  label_ = value_arg;
}


const std::string& SocialMedia::custom_label() const {
  return custom_label_;
}

void SocialMedia::set_custom_label(std::string_view value_arg) {
  custom_label_ = value_arg;
}


EncodableList SocialMedia::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(user_name_));
  list.push_back(EncodableValue(label_));
  list.push_back(EncodableValue(custom_label_));
  return list;
}

SocialMedia SocialMedia::FromEncodableList(const EncodableList& list) {
  SocialMedia decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]));
  return decoded;
}

// Event

Event::Event(
  int64_t month,
  int64_t day,
  const std::string& label,
  const std::string& custom_label)
 : month_(month),
    day_(day),
    label_(label),
    custom_label_(custom_label) {}

Event::Event(
  const int64_t* year,
  int64_t month,
  int64_t day,
  const std::string& label,
  const std::string& custom_label)
 : year_(year ? std::optional<int64_t>(*year) : std::nullopt),
    month_(month),
    day_(day),
    label_(label),
    custom_label_(custom_label) {}

const int64_t* Event::year() const {
  return year_ ? &(*year_) : nullptr;
}

void Event::set_year(const int64_t* value_arg) {
  year_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void Event::set_year(int64_t value_arg) {
  year_ = value_arg;
}


int64_t Event::month() const {
  return month_;
}

void Event::set_month(int64_t value_arg) {
  month_ = value_arg;
}


int64_t Event::day() const {
  return day_;
}

void Event::set_day(int64_t value_arg) {
  day_ = value_arg;
}


const std::string& Event::label() const {
  return label_;
}

void Event::set_label(std::string_view value_arg) {
  label_ = value_arg;
}


const std::string& Event::custom_label() const {
  return custom_label_;
}

void Event::set_custom_label(std::string_view value_arg) {
  custom_label_ = value_arg;
}


EncodableList Event::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(year_ ? EncodableValue(*year_) : EncodableValue());
  list.push_back(EncodableValue(month_));
  list.push_back(EncodableValue(day_));
  list.push_back(EncodableValue(label_));
  list.push_back(EncodableValue(custom_label_));
  return list;
}

Event Event::FromEncodableList(const EncodableList& list) {
  Event decoded(
    std::get<int64_t>(list[1]),
    std::get<int64_t>(list[2]),
    std::get<std::string>(list[3]),
    std::get<std::string>(list[4]));
  auto& encodable_year = list[0];
  if (!encodable_year.IsNull()) {
    decoded.set_year(std::get<int64_t>(encodable_year));
  }
  return decoded;
}

// Note

Note::Note(const std::string& note)
 : note_(note) {}

const std::string& Note::note() const {
  return note_;
}

void Note::set_note(std::string_view value_arg) {
  note_ = value_arg;
}


EncodableList Note::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(note_));
  return list;
}

Note Note::FromEncodableList(const EncodableList& list) {
  Note decoded(
    std::get<std::string>(list[0]));
  return decoded;
}

// Account

Account::Account(
  const std::string& raw_id,
  const std::string& name,
  const std::string& type,
  const EncodableList& mimetypes)
 : raw_id_(raw_id),
    name_(name),
    type_(type),
    mimetypes_(mimetypes) {}

const std::string& Account::raw_id() const {
  return raw_id_;
}

void Account::set_raw_id(std::string_view value_arg) {
  raw_id_ = value_arg;
}


const std::string& Account::name() const {
  return name_;
}

void Account::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


const std::string& Account::type() const {
  return type_;
}

void Account::set_type(std::string_view value_arg) {
  type_ = value_arg;
}


const EncodableList& Account::mimetypes() const {
  return mimetypes_;
}

void Account::set_mimetypes(const EncodableList& value_arg) {
  mimetypes_ = value_arg;
}


EncodableList Account::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(raw_id_));
  list.push_back(EncodableValue(name_));
  list.push_back(EncodableValue(type_));
  list.push_back(EncodableValue(mimetypes_));
  return list;
}

Account Account::FromEncodableList(const EncodableList& list) {
  Account decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<EncodableList>(list[3]));
  return decoded;
}

// Group

Group::Group(
  const std::string& id,
  const std::string& name)
 : id_(id),
    name_(name) {}

const std::string& Group::id() const {
  return id_;
}

void Group::set_id(std::string_view value_arg) {
  id_ = value_arg;
}


const std::string& Group::name() const {
  return name_;
}

void Group::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


EncodableList Group::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(id_));
  list.push_back(EncodableValue(name_));
  return list;
}

Group Group::FromEncodableList(const EncodableList& list) {
  Group decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]));
  return decoded;
}

// Contact

Contact::Contact(
  const std::string& id,
  const std::string& display_name,
  bool is_starred,
  const EncodableList& phones,
  const EncodableList& emails,
  const EncodableList& addresses,
  const EncodableList& organizations,
  const EncodableList& websites,
  const EncodableList& social_medias,
  const EncodableList& events,
  const EncodableList& notes,
  const EncodableList& accounts,
  const EncodableList& groups)
 : id_(id),
    display_name_(display_name),
    is_starred_(is_starred),
    phones_(phones),
    emails_(emails),
    addresses_(addresses),
    organizations_(organizations),
    websites_(websites),
    social_medias_(social_medias),
    events_(events),
    notes_(notes),
    accounts_(accounts),
    groups_(groups) {}

Contact::Contact(
  const std::string& id,
  const std::string& display_name,
  bool is_starred,
  const Name* name,
  const std::vector<uint8_t>* thumbnail,
  const std::vector<uint8_t>* photo,
  const EncodableList& phones,
  const EncodableList& emails,
  const EncodableList& addresses,
  const EncodableList& organizations,
  const EncodableList& websites,
  const EncodableList& social_medias,
  const EncodableList& events,
  const EncodableList& notes,
  const EncodableList& accounts,
  const EncodableList& groups)
 : id_(id),
    display_name_(display_name),
    is_starred_(is_starred),
    name_(name ? std::make_unique<Name>(*name) : nullptr),
    thumbnail_(thumbnail ? std::optional<std::vector<uint8_t>>(*thumbnail) : std::nullopt),
    photo_(photo ? std::optional<std::vector<uint8_t>>(*photo) : std::nullopt),
    phones_(phones),
    emails_(emails),
    addresses_(addresses),
    organizations_(organizations),
    websites_(websites),
    social_medias_(social_medias),
    events_(events),
    notes_(notes),
    accounts_(accounts),
    groups_(groups) {}

Contact::Contact(const Contact& other)
 : id_(other.id_),
    display_name_(other.display_name_),
    is_starred_(other.is_starred_),
    name_(other.name_ ? std::make_unique<Name>(*other.name_) : nullptr),
    thumbnail_(other.thumbnail_ ? std::optional<std::vector<uint8_t>>(*other.thumbnail_) : std::nullopt),
    photo_(other.photo_ ? std::optional<std::vector<uint8_t>>(*other.photo_) : std::nullopt),
    phones_(other.phones_),
    emails_(other.emails_),
    addresses_(other.addresses_),
    organizations_(other.organizations_),
    websites_(other.websites_),
    social_medias_(other.social_medias_),
    events_(other.events_),
    notes_(other.notes_),
    accounts_(other.accounts_),
    groups_(other.groups_) {}

Contact& Contact::operator=(const Contact& other) {
  id_ = other.id_;
  display_name_ = other.display_name_;
  is_starred_ = other.is_starred_;
  name_ = other.name_ ? std::make_unique<Name>(*other.name_) : nullptr;
  thumbnail_ = other.thumbnail_;
  photo_ = other.photo_;
  phones_ = other.phones_;
  emails_ = other.emails_;
  addresses_ = other.addresses_;
  organizations_ = other.organizations_;
  websites_ = other.websites_;
  social_medias_ = other.social_medias_;
  events_ = other.events_;
  notes_ = other.notes_;
  accounts_ = other.accounts_;
  groups_ = other.groups_;
  return *this;
}

const std::string& Contact::id() const {
  return id_;
}

void Contact::set_id(std::string_view value_arg) {
  id_ = value_arg;
}


const std::string& Contact::display_name() const {
  return display_name_;
}

void Contact::set_display_name(std::string_view value_arg) {
  display_name_ = value_arg;
}


bool Contact::is_starred() const {
  return is_starred_;
}

void Contact::set_is_starred(bool value_arg) {
  is_starred_ = value_arg;
}


const Name* Contact::name() const {
  return name_.get();
}

void Contact::set_name(const Name* value_arg) {
  name_ = value_arg ? std::make_unique<Name>(*value_arg) : nullptr;
}

void Contact::set_name(const Name& value_arg) {
  name_ = std::make_unique<Name>(value_arg);
}


const std::vector<uint8_t>* Contact::thumbnail() const {
  return thumbnail_ ? &(*thumbnail_) : nullptr;
}

void Contact::set_thumbnail(const std::vector<uint8_t>* value_arg) {
  thumbnail_ = value_arg ? std::optional<std::vector<uint8_t>>(*value_arg) : std::nullopt;
}

void Contact::set_thumbnail(const std::vector<uint8_t>& value_arg) {
  thumbnail_ = value_arg;
}


const std::vector<uint8_t>* Contact::photo() const {
  return photo_ ? &(*photo_) : nullptr;
}

void Contact::set_photo(const std::vector<uint8_t>* value_arg) {
  photo_ = value_arg ? std::optional<std::vector<uint8_t>>(*value_arg) : std::nullopt;
}

void Contact::set_photo(const std::vector<uint8_t>& value_arg) {
  photo_ = value_arg;
}


const EncodableList& Contact::phones() const {
  return phones_;
}

void Contact::set_phones(const EncodableList& value_arg) {
  phones_ = value_arg;
}


const EncodableList& Contact::emails() const {
  return emails_;
}

void Contact::set_emails(const EncodableList& value_arg) {
  emails_ = value_arg;
}


const EncodableList& Contact::addresses() const {
  return addresses_;
}

void Contact::set_addresses(const EncodableList& value_arg) {
  addresses_ = value_arg;
}


const EncodableList& Contact::organizations() const {
  return organizations_;
}

void Contact::set_organizations(const EncodableList& value_arg) {
  organizations_ = value_arg;
}


const EncodableList& Contact::websites() const {
  return websites_;
}

void Contact::set_websites(const EncodableList& value_arg) {
  websites_ = value_arg;
}


const EncodableList& Contact::social_medias() const {
  return social_medias_;
}

void Contact::set_social_medias(const EncodableList& value_arg) {
  social_medias_ = value_arg;
}


const EncodableList& Contact::events() const {
  return events_;
}

void Contact::set_events(const EncodableList& value_arg) {
  events_ = value_arg;
}


const EncodableList& Contact::notes() const {
  return notes_;
}

void Contact::set_notes(const EncodableList& value_arg) {
  notes_ = value_arg;
}


const EncodableList& Contact::accounts() const {
  return accounts_;
}

void Contact::set_accounts(const EncodableList& value_arg) {
  accounts_ = value_arg;
}


const EncodableList& Contact::groups() const {
  return groups_;
}

void Contact::set_groups(const EncodableList& value_arg) {
  groups_ = value_arg;
}


EncodableList Contact::ToEncodableList() const {
  EncodableList list;
  list.reserve(16);
  list.push_back(EncodableValue(id_));
  list.push_back(EncodableValue(display_name_));
  list.push_back(EncodableValue(is_starred_));
  list.push_back(name_ ? CustomEncodableValue(*name_) : EncodableValue());
  list.push_back(thumbnail_ ? EncodableValue(*thumbnail_) : EncodableValue());
  list.push_back(photo_ ? EncodableValue(*photo_) : EncodableValue());
  list.push_back(EncodableValue(phones_));
  list.push_back(EncodableValue(emails_));
  list.push_back(EncodableValue(addresses_));
  list.push_back(EncodableValue(organizations_));
  list.push_back(EncodableValue(websites_));
  list.push_back(EncodableValue(social_medias_));
  list.push_back(EncodableValue(events_));
  list.push_back(EncodableValue(notes_));
  list.push_back(EncodableValue(accounts_));
  list.push_back(EncodableValue(groups_));
  return list;
}

Contact Contact::FromEncodableList(const EncodableList& list) {
  Contact decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<bool>(list[2]),
    std::get<EncodableList>(list[6]),
    std::get<EncodableList>(list[7]),
    std::get<EncodableList>(list[8]),
    std::get<EncodableList>(list[9]),
    std::get<EncodableList>(list[10]),
    std::get<EncodableList>(list[11]),
    std::get<EncodableList>(list[12]),
    std::get<EncodableList>(list[13]),
    std::get<EncodableList>(list[14]),
    std::get<EncodableList>(list[15]));
  auto& encodable_name = list[3];
  if (!encodable_name.IsNull()) {
    decoded.set_name(std::any_cast<const Name&>(std::get<CustomEncodableValue>(encodable_name)));
  }
  auto& encodable_thumbnail = list[4];
  if (!encodable_thumbnail.IsNull()) {
    decoded.set_thumbnail(std::get<std::vector<uint8_t>>(encodable_thumbnail));
  }
  auto& encodable_photo = list[5];
  if (!encodable_photo.IsNull()) {
    decoded.set_photo(std::get<std::vector<uint8_t>>(encodable_photo));
  }
  return decoded;
}

// ContactsRequest

ContactsRequest::ContactsRequest(
  bool with_properties,
  bool with_thumbnail,
  bool with_photo,
  bool with_groups,
  bool with_accounts,
  bool return_unified_contacts,
  bool include_notes_on_ios13_and_above)
 : with_properties_(with_properties),
    with_thumbnail_(with_thumbnail),
    with_photo_(with_photo),
    with_groups_(with_groups),
    with_accounts_(with_accounts),
    return_unified_contacts_(return_unified_contacts),
    include_notes_on_ios13_and_above_(include_notes_on_ios13_and_above) {}

bool ContactsRequest::with_properties() const {
  return with_properties_;
}

void ContactsRequest::set_with_properties(bool value_arg) {
  with_properties_ = value_arg;
}


bool ContactsRequest::with_thumbnail() const {
  return with_thumbnail_;
}

void ContactsRequest::set_with_thumbnail(bool value_arg) {
  with_thumbnail_ = value_arg;
}


bool ContactsRequest::with_photo() const {
  return with_photo_;
}

void ContactsRequest::set_with_photo(bool value_arg) {
  with_photo_ = value_arg;
}


bool ContactsRequest::with_groups() const {
  return with_groups_;
}

void ContactsRequest::set_with_groups(bool value_arg) {
  with_groups_ = value_arg;
}


bool ContactsRequest::with_accounts() const {
  return with_accounts_;
}

void ContactsRequest::set_with_accounts(bool value_arg) {
  with_accounts_ = value_arg;
}


bool ContactsRequest::return_unified_contacts() const {
  return return_unified_contacts_;
}

void ContactsRequest::set_return_unified_contacts(bool value_arg) {
  return_unified_contacts_ = value_arg;
}


bool ContactsRequest::include_notes_on_ios13_and_above() const {
  return include_notes_on_ios13_and_above_;
}

void ContactsRequest::set_include_notes_on_ios13_and_above(bool value_arg) {
  include_notes_on_ios13_and_above_ = value_arg;
}


EncodableList ContactsRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(EncodableValue(with_properties_));
  list.push_back(EncodableValue(with_thumbnail_));
  list.push_back(EncodableValue(with_photo_));
  list.push_back(EncodableValue(with_groups_));
  list.push_back(EncodableValue(with_accounts_));
  list.push_back(EncodableValue(return_unified_contacts_));
  list.push_back(EncodableValue(include_notes_on_ios13_and_above_));
  return list;
}

ContactsRequest ContactsRequest::FromEncodableList(const EncodableList& list) {
  ContactsRequest decoded(
    std::get<bool>(list[0]),
    std::get<bool>(list[1]),
    std::get<bool>(list[2]),
    std::get<bool>(list[3]),
    std::get<bool>(list[4]),
    std::get<bool>(list[5]),
    std::get<bool>(list[6]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<PermisionsApi>(enum_arg_value));
      }
    case 130: {
        return CustomEncodableValue(Name::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 131: {
        return CustomEncodableValue(Phone::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 132: {
        return CustomEncodableValue(Email::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 133: {
        return CustomEncodableValue(Address::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 134: {
        return CustomEncodableValue(Organization::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 135: {
        return CustomEncodableValue(Website::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 136: {
        return CustomEncodableValue(SocialMedia::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 137: {
        return CustomEncodableValue(Event::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 138: {
        return CustomEncodableValue(Note::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 139: {
        return CustomEncodableValue(Account::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 140: {
        return CustomEncodableValue(Group::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 141: {
        return CustomEncodableValue(Contact::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 142: {
        return CustomEncodableValue(ContactsRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PermisionsApi)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<PermisionsApi>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(Name)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<Name>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Phone)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<Phone>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Email)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<Email>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Address)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<Address>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Organization)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<Organization>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Website)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<Website>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(SocialMedia)) {
      stream->WriteByte(136);
      WriteValue(EncodableValue(std::any_cast<SocialMedia>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Event)) {
      stream->WriteByte(137);
      WriteValue(EncodableValue(std::any_cast<Event>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Note)) {
      stream->WriteByte(138);
      WriteValue(EncodableValue(std::any_cast<Note>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Account)) {
      stream->WriteByte(139);
      WriteValue(EncodableValue(std::any_cast<Account>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Group)) {
      stream->WriteByte(140);
      WriteValue(EncodableValue(std::any_cast<Group>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(Contact)) {
      stream->WriteByte(141);
      WriteValue(EncodableValue(std::any_cast<Contact>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ContactsRequest)) {
      stream->WriteByte(142);
      WriteValue(EncodableValue(std::any_cast<ContactsRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by ContactsHostApi.
const flutter::StandardMessageCodec& ContactsHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `ContactsHostApi` to handle messages through the `binary_messenger`.
void ContactsHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  ContactsHostApi* api) {
  ContactsHostApi::SetUp(binary_messenger, api, "");
}

void ContactsHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  ContactsHostApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContacts" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_config_arg = args.at(0);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const ContactsRequest&>(std::get<CustomEncodableValue>(encodable_config_arg));
          api->GetContacts(config_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithName" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_name_arg = args.at(0);
          if (encodable_name_arg.IsNull()) {
            reply(WrapError("name_arg unexpectedly null."));
            return;
          }
          const auto& name_arg = std::get<std::string>(encodable_name_arg);
          const auto& encodable_config_arg = args.at(1);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const ContactsRequest&>(std::get<CustomEncodableValue>(encodable_config_arg));
          api->GetContactsWithName(name_arg, config_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithEmail" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_email_arg = args.at(0);
          if (encodable_email_arg.IsNull()) {
            reply(WrapError("email_arg unexpectedly null."));
            return;
          }
          const auto& email_arg = std::get<std::string>(encodable_email_arg);
          const auto& encodable_config_arg = args.at(1);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const ContactsRequest&>(std::get<CustomEncodableValue>(encodable_config_arg));
          api->GetContactsWithEmail(email_arg, config_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithPhone" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_phone_arg = args.at(0);
          if (encodable_phone_arg.IsNull()) {
            reply(WrapError("phone_arg unexpectedly null."));
            return;
          }
          const auto& phone_arg = std::get<std::string>(encodable_phone_arg);
          const auto& encodable_config_arg = args.at(1);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const ContactsRequest&>(std::get<CustomEncodableValue>(encodable_config_arg));
          api->GetContactsWithPhone(phone_arg, config_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithIds" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_ids_arg = args.at(0);
          if (encodable_ids_arg.IsNull()) {
            reply(WrapError("ids_arg unexpectedly null."));
            return;
          }
          const auto& ids_arg = std::get<EncodableList>(encodable_ids_arg);
          const auto& encodable_config_arg = args.at(1);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const ContactsRequest&>(std::get<CustomEncodableValue>(encodable_config_arg));
          api->GetContactsWithIds(ids_arg, config_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsInGroup" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_group_id_arg = args.at(0);
          if (encodable_group_id_arg.IsNull()) {
            reply(WrapError("group_id_arg unexpectedly null."));
            return;
          }
          const auto& group_id_arg = std::get<std::string>(encodable_group_id_arg);
          const auto& encodable_config_arg = args.at(1);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const ContactsRequest&>(std::get<CustomEncodableValue>(encodable_config_arg));
          api->GetContactsInGroup(group_id_arg, config_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsInContainer" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_container_id_arg = args.at(0);
          if (encodable_container_id_arg.IsNull()) {
            reply(WrapError("container_id_arg unexpectedly null."));
            return;
          }
          const auto& container_id_arg = std::get<std::string>(encodable_container_id_arg);
          const auto& encodable_config_arg = args.at(1);
          if (encodable_config_arg.IsNull()) {
            reply(WrapError("config_arg unexpectedly null."));
            return;
          }
          const auto& config_arg = std::any_cast<const ContactsRequest&>(std::get<CustomEncodableValue>(encodable_config_arg));
          api->GetContactsInContainer(container_id_arg, config_arg, [reply](ErrorOr<EncodableList>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.checkPermission" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->CheckPermission([reply](ErrorOr<PermisionsApi>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.requestPermission" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->RequestPermission([reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue ContactsHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue ContactsHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace pigeon_example
