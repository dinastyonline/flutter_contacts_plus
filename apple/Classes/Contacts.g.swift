// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct Name {
  var first: String
  var last: String
  var middle: String
  var prefix: String
  var suffix: String
  var nickname: String
  var firstPhonetic: String
  var lastPhonetic: String
  var middlePhonetic: String

  static func fromList(_ list: [Any?]) -> Name? {
    let first = list[0] as! String
    let last = list[1] as! String
    let middle = list[2] as! String
    let prefix = list[3] as! String
    let suffix = list[4] as! String
    let nickname = list[5] as! String
    let firstPhonetic = list[6] as! String
    let lastPhonetic = list[7] as! String
    let middlePhonetic = list[8] as! String

    return Name(
      first: first,
      last: last,
      middle: middle,
      prefix: prefix,
      suffix: suffix,
      nickname: nickname,
      firstPhonetic: firstPhonetic,
      lastPhonetic: lastPhonetic,
      middlePhonetic: middlePhonetic
    )
  }
  func toList() -> [Any?] {
    return [
      first,
      last,
      middle,
      prefix,
      suffix,
      nickname,
      firstPhonetic,
      lastPhonetic,
      middlePhonetic,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Phone {
  var number: String
  var normalizedNumber: String
  var label: String
  var customLabel: String
  var isPrimary: Bool

  static func fromList(_ list: [Any?]) -> Phone? {
    let number = list[0] as! String
    let normalizedNumber = list[1] as! String
    let label = list[2] as! String
    let customLabel = list[3] as! String
    let isPrimary = list[4] as! Bool

    return Phone(
      number: number,
      normalizedNumber: normalizedNumber,
      label: label,
      customLabel: customLabel,
      isPrimary: isPrimary
    )
  }
  func toList() -> [Any?] {
    return [
      number,
      normalizedNumber,
      label,
      customLabel,
      isPrimary,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Email {
  var address: String
  var label: String
  var customLabel: String
  var isPrimary: Bool

  static func fromList(_ list: [Any?]) -> Email? {
    let address = list[0] as! String
    let label = list[1] as! String
    let customLabel = list[2] as! String
    let isPrimary = list[3] as! Bool

    return Email(
      address: address,
      label: label,
      customLabel: customLabel,
      isPrimary: isPrimary
    )
  }
  func toList() -> [Any?] {
    return [
      address,
      label,
      customLabel,
      isPrimary,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Address {
  var address: String
  var label: String
  var customLabel: String
  var street: String
  var pobox: String
  var neighborhood: String
  var city: String
  var state: String
  var postalCode: String
  var country: String
  var isoCountry: String
  var subAdminArea: String
  var subLocality: String

  static func fromList(_ list: [Any?]) -> Address? {
    let address = list[0] as! String
    let label = list[1] as! String
    let customLabel = list[2] as! String
    let street = list[3] as! String
    let pobox = list[4] as! String
    let neighborhood = list[5] as! String
    let city = list[6] as! String
    let state = list[7] as! String
    let postalCode = list[8] as! String
    let country = list[9] as! String
    let isoCountry = list[10] as! String
    let subAdminArea = list[11] as! String
    let subLocality = list[12] as! String

    return Address(
      address: address,
      label: label,
      customLabel: customLabel,
      street: street,
      pobox: pobox,
      neighborhood: neighborhood,
      city: city,
      state: state,
      postalCode: postalCode,
      country: country,
      isoCountry: isoCountry,
      subAdminArea: subAdminArea,
      subLocality: subLocality
    )
  }
  func toList() -> [Any?] {
    return [
      address,
      label,
      customLabel,
      street,
      pobox,
      neighborhood,
      city,
      state,
      postalCode,
      country,
      isoCountry,
      subAdminArea,
      subLocality,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Organization {
  var company: String
  var title: String
  var department: String
  var jobDescription: String
  var symbol: String
  var phoneticName: String
  var officeLocation: String

  static func fromList(_ list: [Any?]) -> Organization? {
    let company = list[0] as! String
    let title = list[1] as! String
    let department = list[2] as! String
    let jobDescription = list[3] as! String
    let symbol = list[4] as! String
    let phoneticName = list[5] as! String
    let officeLocation = list[6] as! String

    return Organization(
      company: company,
      title: title,
      department: department,
      jobDescription: jobDescription,
      symbol: symbol,
      phoneticName: phoneticName,
      officeLocation: officeLocation
    )
  }
  func toList() -> [Any?] {
    return [
      company,
      title,
      department,
      jobDescription,
      symbol,
      phoneticName,
      officeLocation,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Website {
  var url: String
  var label: String
  var customLabel: String

  static func fromList(_ list: [Any?]) -> Website? {
    let url = list[0] as! String
    let label = list[1] as! String
    let customLabel = list[2] as! String

    return Website(
      url: url,
      label: label,
      customLabel: customLabel
    )
  }
  func toList() -> [Any?] {
    return [
      url,
      label,
      customLabel,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SocialMedia {
  var userName: String
  var label: String
  var customLabel: String

  static func fromList(_ list: [Any?]) -> SocialMedia? {
    let userName = list[0] as! String
    let label = list[1] as! String
    let customLabel = list[2] as! String

    return SocialMedia(
      userName: userName,
      label: label,
      customLabel: customLabel
    )
  }
  func toList() -> [Any?] {
    return [
      userName,
      label,
      customLabel,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Event {
  var year: Int64? = nil
  var month: Int64
  var day: Int64
  var label: String
  var customLabel: String

  static func fromList(_ list: [Any?]) -> Event? {
    let year: Int64? = list[0] is NSNull ? nil : (list[0] is Int64? ? list[0] as! Int64? : Int64(list[0] as! Int32))
    let month = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let day = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let label = list[3] as! String
    let customLabel = list[4] as! String

    return Event(
      year: year,
      month: month,
      day: day,
      label: label,
      customLabel: customLabel
    )
  }
  func toList() -> [Any?] {
    return [
      year,
      month,
      day,
      label,
      customLabel,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Note {
  var note: String

  static func fromList(_ list: [Any?]) -> Note? {
    let note = list[0] as! String

    return Note(
      note: note
    )
  }
  func toList() -> [Any?] {
    return [
      note,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Account {
  var rawId: String
  var name: String
  var type: String
  var mimetypes: [String?]

  static func fromList(_ list: [Any?]) -> Account? {
    let rawId = list[0] as! String
    let name = list[1] as! String
    let type = list[2] as! String
    let mimetypes = list[3] as! [String?]

    return Account(
      rawId: rawId,
      name: name,
      type: type,
      mimetypes: mimetypes
    )
  }
  func toList() -> [Any?] {
    return [
      rawId,
      name,
      type,
      mimetypes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Group {
  var id: String
  var name: String

  static func fromList(_ list: [Any?]) -> Group? {
    let id = list[0] as! String
    let name = list[1] as! String

    return Group(
      id: id,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Contact {
  var id: String
  var displayName: String
  var isStarred: Bool
  var name: Name? = nil
  var thumbnail: FlutterStandardTypedData? = nil
  var photo: FlutterStandardTypedData? = nil
  var phones: [Phone?]
  var emails: [Email?]
  var addresses: [Address?]
  var organizations: [Organization?]
  var websites: [Website?]
  var socialMedias: [SocialMedia?]
  var events: [Event?]
  var notes: [Note?]
  var accounts: [Account?]
  var groups: [Group?]

  static func fromList(_ list: [Any?]) -> Contact? {
    let id = list[0] as! String
    let displayName = list[1] as! String
    let isStarred = list[2] as! Bool
    var name: Name? = nil
    if let nameList: [Any?] = nilOrValue(list[3]) {
      name = Name.fromList(nameList)
    }
    let thumbnail: FlutterStandardTypedData? = nilOrValue(list[4])
    let photo: FlutterStandardTypedData? = nilOrValue(list[5])
    let phones = list[6] as! [Phone?]
    let emails = list[7] as! [Email?]
    let addresses = list[8] as! [Address?]
    let organizations = list[9] as! [Organization?]
    let websites = list[10] as! [Website?]
    let socialMedias = list[11] as! [SocialMedia?]
    let events = list[12] as! [Event?]
    let notes = list[13] as! [Note?]
    let accounts = list[14] as! [Account?]
    let groups = list[15] as! [Group?]

    return Contact(
      id: id,
      displayName: displayName,
      isStarred: isStarred,
      name: name,
      thumbnail: thumbnail,
      photo: photo,
      phones: phones,
      emails: emails,
      addresses: addresses,
      organizations: organizations,
      websites: websites,
      socialMedias: socialMedias,
      events: events,
      notes: notes,
      accounts: accounts,
      groups: groups
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      displayName,
      isStarred,
      name?.toList(),
      thumbnail,
      photo,
      phones,
      emails,
      addresses,
      organizations,
      websites,
      socialMedias,
      events,
      notes,
      accounts,
      groups,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ContactsRequest {
  var withProperties: Bool
  var withThumbnail: Bool
  var withPhoto: Bool
  var withGroups: Bool
  var withAccounts: Bool
  var returnUnifiedContacts: Bool
  var includeNotesOnIos13AndAbove: Bool

  static func fromList(_ list: [Any?]) -> ContactsRequest? {
    let withProperties = list[0] as! Bool
    let withThumbnail = list[1] as! Bool
    let withPhoto = list[2] as! Bool
    let withGroups = list[3] as! Bool
    let withAccounts = list[4] as! Bool
    let returnUnifiedContacts = list[5] as! Bool
    let includeNotesOnIos13AndAbove = list[6] as! Bool

    return ContactsRequest(
      withProperties: withProperties,
      withThumbnail: withThumbnail,
      withPhoto: withPhoto,
      withGroups: withGroups,
      withAccounts: withAccounts,
      returnUnifiedContacts: returnUnifiedContacts,
      includeNotesOnIos13AndAbove: includeNotesOnIos13AndAbove
    )
  }
  func toList() -> [Any?] {
    return [
      withProperties,
      withThumbnail,
      withPhoto,
      withGroups,
      withAccounts,
      returnUnifiedContacts,
      includeNotesOnIos13AndAbove,
    ]
  }
}

private class ContactsHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Account.fromList(self.readValue() as! [Any?])
      case 129:
        return Address.fromList(self.readValue() as! [Any?])
      case 130:
        return Contact.fromList(self.readValue() as! [Any?])
      case 131:
        return ContactsRequest.fromList(self.readValue() as! [Any?])
      case 132:
        return Email.fromList(self.readValue() as! [Any?])
      case 133:
        return Event.fromList(self.readValue() as! [Any?])
      case 134:
        return Group.fromList(self.readValue() as! [Any?])
      case 135:
        return Name.fromList(self.readValue() as! [Any?])
      case 136:
        return Note.fromList(self.readValue() as! [Any?])
      case 137:
        return Organization.fromList(self.readValue() as! [Any?])
      case 138:
        return Phone.fromList(self.readValue() as! [Any?])
      case 139:
        return SocialMedia.fromList(self.readValue() as! [Any?])
      case 140:
        return Website.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ContactsHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Account {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? Address {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? Contact {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ContactsRequest {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? Email {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? Event {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? Group {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? Name {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? Note {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? Organization {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? Phone {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? SocialMedia {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? Website {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ContactsHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ContactsHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ContactsHostApiCodecWriter(data: data)
  }
}

class ContactsHostApiCodec: FlutterStandardMessageCodec {
  static let shared = ContactsHostApiCodec(readerWriter: ContactsHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ContactsHostApi {
  func getContacts(config: ContactsRequest, completion: @escaping (Result<[Contact], Error>) -> Void)
  func getContactsWithName(name: String, config: ContactsRequest, completion: @escaping (Result<[Contact], Error>) -> Void)
  func getContactsWithEmail(email: String, config: ContactsRequest, completion: @escaping (Result<[Contact], Error>) -> Void)
  func getContactsWithPhone(phone: String, config: ContactsRequest, completion: @escaping (Result<[Contact], Error>) -> Void)
  func getContactsWithIds(ids: [String], config: ContactsRequest, completion: @escaping (Result<[Contact], Error>) -> Void)
  func getContactsInGroup(groupId: String, config: ContactsRequest, completion: @escaping (Result<[Contact], Error>) -> Void)
  func getContactsInContainer(containerId: String, config: ContactsRequest, completion: @escaping (Result<[Contact], Error>) -> Void)
  func checkPermission(completion: @escaping (Result<String, Error>) -> Void)
  func requestPermission(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ContactsHostApiSetup {
  /// The codec used by ContactsHostApi.
  static var codec: FlutterStandardMessageCodec { ContactsHostApiCodec.shared }
  /// Sets up an instance of `ContactsHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ContactsHostApi?) {
    let getContactsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContacts", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! ContactsRequest
        api.getContacts(config: configArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsChannel.setMessageHandler(nil)
    }
    let getContactsWithNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithName", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsWithNameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        let configArg = args[1] as! ContactsRequest
        api.getContactsWithName(name: nameArg, config: configArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsWithNameChannel.setMessageHandler(nil)
    }
    let getContactsWithEmailChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithEmail", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsWithEmailChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let emailArg = args[0] as! String
        let configArg = args[1] as! ContactsRequest
        api.getContactsWithEmail(email: emailArg, config: configArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsWithEmailChannel.setMessageHandler(nil)
    }
    let getContactsWithPhoneChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithPhone", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsWithPhoneChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let phoneArg = args[0] as! String
        let configArg = args[1] as! ContactsRequest
        api.getContactsWithPhone(phone: phoneArg, config: configArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsWithPhoneChannel.setMessageHandler(nil)
    }
    let getContactsWithIdsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithIds", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsWithIdsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idsArg = args[0] as! [String]
        let configArg = args[1] as! ContactsRequest
        api.getContactsWithIds(ids: idsArg, config: configArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsWithIdsChannel.setMessageHandler(nil)
    }
    let getContactsInGroupChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsInGroup", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsInGroupChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let groupIdArg = args[0] as! String
        let configArg = args[1] as! ContactsRequest
        api.getContactsInGroup(groupId: groupIdArg, config: configArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsInGroupChannel.setMessageHandler(nil)
    }
    let getContactsInContainerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsInContainer", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsInContainerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let containerIdArg = args[0] as! String
        let configArg = args[1] as! ContactsRequest
        api.getContactsInContainer(containerId: containerIdArg, config: configArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsInContainerChannel.setMessageHandler(nil)
    }
    let checkPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.checkPermission", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      checkPermissionChannel.setMessageHandler { _, reply in
        api.checkPermission() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      checkPermissionChannel.setMessageHandler(nil)
    }
    let requestPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.requestPermission", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPermissionChannel.setMessageHandler { _, reply in
        api.requestPermission() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestPermissionChannel.setMessageHandler(nil)
    }
  }
}
