// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum PermisionsApi {
  granted,
  denied,
  restricted,
  unknown,
  notDetermined,
}

class Name {
  Name({
    required this.first,
    required this.last,
    required this.middle,
    required this.prefix,
    required this.suffix,
    required this.nickname,
    required this.firstPhonetic,
    required this.lastPhonetic,
    required this.middlePhonetic,
  });

  String first;

  String last;

  String middle;

  String prefix;

  String suffix;

  String nickname;

  String firstPhonetic;

  String lastPhonetic;

  String middlePhonetic;

  Object encode() {
    return <Object?>[
      first,
      last,
      middle,
      prefix,
      suffix,
      nickname,
      firstPhonetic,
      lastPhonetic,
      middlePhonetic,
    ];
  }

  static Name decode(Object result) {
    result as List<Object?>;
    return Name(
      first: result[0]! as String,
      last: result[1]! as String,
      middle: result[2]! as String,
      prefix: result[3]! as String,
      suffix: result[4]! as String,
      nickname: result[5]! as String,
      firstPhonetic: result[6]! as String,
      lastPhonetic: result[7]! as String,
      middlePhonetic: result[8]! as String,
    );
  }
}

class Phone {
  Phone({
    required this.number,
    required this.normalizedNumber,
    required this.label,
    required this.customLabel,
    required this.isPrimary,
  });

  String number;

  String normalizedNumber;

  String label;

  String customLabel;

  bool isPrimary;

  Object encode() {
    return <Object?>[
      number,
      normalizedNumber,
      label,
      customLabel,
      isPrimary,
    ];
  }

  static Phone decode(Object result) {
    result as List<Object?>;
    return Phone(
      number: result[0]! as String,
      normalizedNumber: result[1]! as String,
      label: result[2]! as String,
      customLabel: result[3]! as String,
      isPrimary: result[4]! as bool,
    );
  }
}

class Email {
  Email({
    required this.address,
    required this.label,
    required this.customLabel,
    required this.isPrimary,
  });

  String address;

  String label;

  String customLabel;

  bool isPrimary;

  Object encode() {
    return <Object?>[
      address,
      label,
      customLabel,
      isPrimary,
    ];
  }

  static Email decode(Object result) {
    result as List<Object?>;
    return Email(
      address: result[0]! as String,
      label: result[1]! as String,
      customLabel: result[2]! as String,
      isPrimary: result[3]! as bool,
    );
  }
}

class Address {
  Address({
    required this.address,
    required this.label,
    required this.customLabel,
    required this.street,
    required this.pobox,
    required this.neighborhood,
    required this.city,
    required this.state,
    required this.postalCode,
    required this.country,
    required this.isoCountry,
    required this.subAdminArea,
    required this.subLocality,
  });

  String address;

  String label;

  String customLabel;

  String street;

  String pobox;

  String neighborhood;

  String city;

  String state;

  String postalCode;

  String country;

  String isoCountry;

  String subAdminArea;

  String subLocality;

  Object encode() {
    return <Object?>[
      address,
      label,
      customLabel,
      street,
      pobox,
      neighborhood,
      city,
      state,
      postalCode,
      country,
      isoCountry,
      subAdminArea,
      subLocality,
    ];
  }

  static Address decode(Object result) {
    result as List<Object?>;
    return Address(
      address: result[0]! as String,
      label: result[1]! as String,
      customLabel: result[2]! as String,
      street: result[3]! as String,
      pobox: result[4]! as String,
      neighborhood: result[5]! as String,
      city: result[6]! as String,
      state: result[7]! as String,
      postalCode: result[8]! as String,
      country: result[9]! as String,
      isoCountry: result[10]! as String,
      subAdminArea: result[11]! as String,
      subLocality: result[12]! as String,
    );
  }
}

class Organization {
  Organization({
    required this.company,
    required this.title,
    required this.department,
    required this.jobDescription,
    required this.symbol,
    required this.phoneticName,
    required this.officeLocation,
  });

  String company;

  String title;

  String department;

  String jobDescription;

  String symbol;

  String phoneticName;

  String officeLocation;

  Object encode() {
    return <Object?>[
      company,
      title,
      department,
      jobDescription,
      symbol,
      phoneticName,
      officeLocation,
    ];
  }

  static Organization decode(Object result) {
    result as List<Object?>;
    return Organization(
      company: result[0]! as String,
      title: result[1]! as String,
      department: result[2]! as String,
      jobDescription: result[3]! as String,
      symbol: result[4]! as String,
      phoneticName: result[5]! as String,
      officeLocation: result[6]! as String,
    );
  }
}

class Website {
  Website({
    required this.url,
    required this.label,
    required this.customLabel,
  });

  String url;

  String label;

  String customLabel;

  Object encode() {
    return <Object?>[
      url,
      label,
      customLabel,
    ];
  }

  static Website decode(Object result) {
    result as List<Object?>;
    return Website(
      url: result[0]! as String,
      label: result[1]! as String,
      customLabel: result[2]! as String,
    );
  }
}

class SocialMedia {
  SocialMedia({
    required this.userName,
    required this.label,
    required this.customLabel,
  });

  String userName;

  String label;

  String customLabel;

  Object encode() {
    return <Object?>[
      userName,
      label,
      customLabel,
    ];
  }

  static SocialMedia decode(Object result) {
    result as List<Object?>;
    return SocialMedia(
      userName: result[0]! as String,
      label: result[1]! as String,
      customLabel: result[2]! as String,
    );
  }
}

class Event {
  Event({
    this.year,
    required this.month,
    required this.day,
    required this.label,
    required this.customLabel,
  });

  int? year;

  int month;

  int day;

  String label;

  String customLabel;

  Object encode() {
    return <Object?>[
      year,
      month,
      day,
      label,
      customLabel,
    ];
  }

  static Event decode(Object result) {
    result as List<Object?>;
    return Event(
      year: result[0] as int?,
      month: result[1]! as int,
      day: result[2]! as int,
      label: result[3]! as String,
      customLabel: result[4]! as String,
    );
  }
}

class Note {
  Note({
    required this.note,
  });

  String note;

  Object encode() {
    return <Object?>[
      note,
    ];
  }

  static Note decode(Object result) {
    result as List<Object?>;
    return Note(
      note: result[0]! as String,
    );
  }
}

class Account {
  Account({
    required this.rawId,
    required this.name,
    required this.type,
    required this.mimetypes,
  });

  String rawId;

  String name;

  String type;

  List<String?> mimetypes;

  Object encode() {
    return <Object?>[
      rawId,
      name,
      type,
      mimetypes,
    ];
  }

  static Account decode(Object result) {
    result as List<Object?>;
    return Account(
      rawId: result[0]! as String,
      name: result[1]! as String,
      type: result[2]! as String,
      mimetypes: (result[3] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class Group {
  Group({
    required this.id,
    required this.name,
  });

  String id;

  String name;

  Object encode() {
    return <Object?>[
      id,
      name,
    ];
  }

  static Group decode(Object result) {
    result as List<Object?>;
    return Group(
      id: result[0]! as String,
      name: result[1]! as String,
    );
  }
}

class Contact {
  Contact({
    required this.id,
    required this.displayName,
    required this.isStarred,
    this.name,
    this.thumbnail,
    this.photo,
    required this.phones,
    required this.emails,
    required this.addresses,
    required this.organizations,
    required this.websites,
    required this.socialMedias,
    required this.events,
    required this.notes,
    required this.accounts,
    required this.groups,
  });

  String id;

  String displayName;

  bool isStarred;

  Name? name;

  Uint8List? thumbnail;

  Uint8List? photo;

  List<Phone?> phones;

  List<Email?> emails;

  List<Address?> addresses;

  List<Organization?> organizations;

  List<Website?> websites;

  List<SocialMedia?> socialMedias;

  List<Event?> events;

  List<Note?> notes;

  List<Account?> accounts;

  List<Group?> groups;

  Object encode() {
    return <Object?>[
      id,
      displayName,
      isStarred,
      name,
      thumbnail,
      photo,
      phones,
      emails,
      addresses,
      organizations,
      websites,
      socialMedias,
      events,
      notes,
      accounts,
      groups,
    ];
  }

  static Contact decode(Object result) {
    result as List<Object?>;
    return Contact(
      id: result[0]! as String,
      displayName: result[1]! as String,
      isStarred: result[2]! as bool,
      name: result[3] as Name?,
      thumbnail: result[4] as Uint8List?,
      photo: result[5] as Uint8List?,
      phones: (result[6] as List<Object?>?)!.cast<Phone?>(),
      emails: (result[7] as List<Object?>?)!.cast<Email?>(),
      addresses: (result[8] as List<Object?>?)!.cast<Address?>(),
      organizations: (result[9] as List<Object?>?)!.cast<Organization?>(),
      websites: (result[10] as List<Object?>?)!.cast<Website?>(),
      socialMedias: (result[11] as List<Object?>?)!.cast<SocialMedia?>(),
      events: (result[12] as List<Object?>?)!.cast<Event?>(),
      notes: (result[13] as List<Object?>?)!.cast<Note?>(),
      accounts: (result[14] as List<Object?>?)!.cast<Account?>(),
      groups: (result[15] as List<Object?>?)!.cast<Group?>(),
    );
  }
}

class ContactsRequest {
  ContactsRequest({
    this.withProperties = false,
    this.withThumbnail = false,
    this.withPhoto = false,
    this.withGroups = false,
    this.withAccounts = false,
    this.returnUnifiedContacts = false,
    this.includeNotesOnIos13AndAbove = false,
  });

  bool withProperties;

  bool withThumbnail;

  bool withPhoto;

  bool withGroups;

  bool withAccounts;

  bool returnUnifiedContacts;

  bool includeNotesOnIos13AndAbove;

  Object encode() {
    return <Object?>[
      withProperties,
      withThumbnail,
      withPhoto,
      withGroups,
      withAccounts,
      returnUnifiedContacts,
      includeNotesOnIos13AndAbove,
    ];
  }

  static ContactsRequest decode(Object result) {
    result as List<Object?>;
    return ContactsRequest(
      withProperties: result[0]! as bool,
      withThumbnail: result[1]! as bool,
      withPhoto: result[2]! as bool,
      withGroups: result[3]! as bool,
      withAccounts: result[4]! as bool,
      returnUnifiedContacts: result[5]! as bool,
      includeNotesOnIos13AndAbove: result[6]! as bool,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is PermisionsApi) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is Name) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is Phone) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is Email) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is Address) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is Organization) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is Website) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is SocialMedia) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is Event) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is Note) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is Account) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is Group) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is Contact) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is ContactsRequest) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PermisionsApi.values[value];
      case 130: 
        return Name.decode(readValue(buffer)!);
      case 131: 
        return Phone.decode(readValue(buffer)!);
      case 132: 
        return Email.decode(readValue(buffer)!);
      case 133: 
        return Address.decode(readValue(buffer)!);
      case 134: 
        return Organization.decode(readValue(buffer)!);
      case 135: 
        return Website.decode(readValue(buffer)!);
      case 136: 
        return SocialMedia.decode(readValue(buffer)!);
      case 137: 
        return Event.decode(readValue(buffer)!);
      case 138: 
        return Note.decode(readValue(buffer)!);
      case 139: 
        return Account.decode(readValue(buffer)!);
      case 140: 
        return Group.decode(readValue(buffer)!);
      case 141: 
        return Contact.decode(readValue(buffer)!);
      case 142: 
        return ContactsRequest.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ContactsHostApi {
  /// Constructor for [ContactsHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ContactsHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<List<Contact>> getContacts(ContactsRequest config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContacts$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Contact>();
    }
  }

  Future<List<Contact>> getContactsWithName(String name, ContactsRequest config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithName$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[name, config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Contact>();
    }
  }

  Future<List<Contact>> getContactsWithEmail(String email, ContactsRequest config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithEmail$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[email, config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Contact>();
    }
  }

  Future<List<Contact>> getContactsWithPhone(String phone, ContactsRequest config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithPhone$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[phone, config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Contact>();
    }
  }

  Future<List<Contact>> getContactsWithIds(List<String> ids, ContactsRequest config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsWithIds$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[ids, config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Contact>();
    }
  }

  Future<List<Contact>> getContactsInGroup(String groupId, ContactsRequest config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsInGroup$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[groupId, config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Contact>();
    }
  }

  Future<List<Contact>> getContactsInContainer(String containerId, ContactsRequest config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.getContactsInContainer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[containerId, config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Contact>();
    }
  }

  Future<PermisionsApi> checkPermission() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.checkPermission$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PermisionsApi?)!;
    }
  }

  Future<bool> requestPermission() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.com.dinastyonline.flutter_contacts_plus.ContactsHostApi.requestPermission$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }
}
